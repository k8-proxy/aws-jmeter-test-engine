AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'Performance Dashboard for AWS JMeter Load Generator along with the security group.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  PublicIPRange:
    Description: Stack owner public IP address range. Will be used to connect to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 1.1.1.1/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BucketName:
    Type: String
    Description: 'The name of the S3 Bucket to create, make this unique'
Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64
    t2.2xlarge:
      Arch: HVM64
    t3.nano:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64 
    g3.8xlarge:
      Arch: HVM64
    i3.xlarge:
      Arch: HVM64
    i3.2xlarge:
      Arch: HVM64
    i3.4xlarge:
      Arch: HVM64
    i3.8xlarge:
      Arch: HVM64  
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-northeast-2:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-south-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-southeast-2:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ca-central-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-central-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-west-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-west-2:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-west-3:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-south-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-north-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    eu-west-2:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    sa-east-1:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-087797f9aa7d8dd4a
      PV64: NOT_SUPPORTED
    us-east-2:
      HVM64: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-05e5f150ac5548618
      PV64: NOT_SUPPORTED
    us-west-2:
      HVM64: ami-05a0d9418cd5ca817
      PV64: NOT_SUPPORTED
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'ICAPPerformanceDashboardSG']
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
      IamInstanceProfile: "AWS-TestEngine-IAMRole"
  ICAPPerformanceLGSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access to the load generators
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'PublicIPRange'
  ICAPPerformanceDashboardSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the cluster ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'PublicIPRange'
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        CidrIp: !Ref 'PublicIPRange'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref 'PublicIPRange'
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: !Ref 'PublicIPRange'
      - IpProtocol: tcp
        FromPort: 3100
        ToPort: 3100
        SourceSecurityGroupId: !GetAtt ICAPPerformanceLGSG.GroupId
      - IpProtocol: tcp
        FromPort: 8086
        ToPort: 8086
        SourceSecurityGroupId: !GetAtt ICAPPerformanceLGSG.GroupId
  ICAPPerformanceDashboardSGFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers port 3000 in the same security group
      GroupId: !GetAtt ICAPPerformanceDashboardSG.GroupId
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !GetAtt ICAPPerformanceDashboardSG.GroupId
  S3BUCKET:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
    DeletionPolicy: Delete
  S3User:
    Type: AWS::IAM::User
  S3UserGroup:
    Type: AWS::IAM::Group
  Users:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'S3UserGroup'
      Users: [!Ref 'S3User']
  S3UserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Access
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ['s3:*']
          Resource: '*'
      Groups: [!Ref 'S3UserGroup']
  S3UserKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'S3User'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  Bucket:
    Description: S3 Bucket Name
    Value: !Ref S3BUCKET
  AccessKey:
    Value: !Ref 'S3UserKeys'
    Description: AWSAccessKeyId of new user
  SecretKey:
    Value: !GetAtt [S3UserKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user
